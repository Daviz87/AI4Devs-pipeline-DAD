name: CI/CD Backend Pipeline

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches: # Opcional: especifica ramas base si solo quieres que se active para PRs contra ciertas ramas
      - main
      - develop
      # - 'feature/**' # Ejemplo si usas patrones de ramas

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14 # Se puede ajustar la versión de PostgreSQL según necesidad
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB_TESTS }} # Usar una DB dedicada para tests
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: "postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB_TESTS }}?schema=public" # O un schema específico para tests
      # NODE_ENV: test # Si tu aplicación usa esta variable para configurar tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Basado en @types/node: ^20.12.12 en backend/package.json

      - name: Cache Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-backend-

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci # 'ci' es preferible en pipelines para usar package-lock.json consistentemente

      - name: Wait for PostgreSQL to be healthy
        run: |
          echo "Waiting for PostgreSQL to start..."
          timeout 60s bash -c 'until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do sleep 1; done'
          echo "PostgreSQL is ready."

      - name: Run backend tests
        working-directory: ./backend
        # Si los tests necesitan crear/migrar el esquema de la BD de tests:
        # run: |
        #   npx prisma migrate reset --force # O un script de setup de tests dedicado
        #   npm test
        run: npm test # Asume que los tests manejan su propio setup de BD o que la BD está limpia

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-tests # Depende del éxito del job de tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-backend-

      - name: Install backend dependencies (si no se restauró del caché o para asegurar consistencia)
        working-directory: ./backend
        run: npm ci

      - name: Build backend application
        working-directory: ./backend
        run: npm run build # Esto crea la carpeta backend/dist/

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist-artifact # Nombre del artefacto
          path: | # Lista de rutas a incluir en el artefacto
            backend/dist/
            backend/prisma/
            backend/package.json
            backend/package-lock.json
            # Opcional: incluir ecosystem.config.js si lo usas con PM2
            # backend/ecosystem.config.js

  deploy-backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: backend-build # Depende del éxito del job de build
    # Condición de ejemplo: Desplegar solo si el PR se dirige a 'develop' o 'main'
    # if: github.event.pull_request.merged == false && (github.base_ref == 'develop' || github.base_ref == 'main')
    # Para este caso, si quieres desplegar en cada push a un PR (para un entorno de revisión):
    if: success() # Simplemente se ejecuta si el build fue exitoso

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist-artifact
          path: ./app-deploy # Descarga a ./app-deploy/dist, ./app-deploy/prisma, etc.

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_IAM_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create target directory on EC2 for new release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            RELEASE_ID="release-${{ github.run_id }}"
            sudo mkdir -p /srv/my-app-backend/${RELEASE_ID}
            sudo chown ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /srv/my-app-backend/${RELEASE_ID}
            echo "Created release directory: /srv/my-app-backend/${RELEASE_ID}"

      - name: Deploy artifact to EC2 new release directory
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./app-deploy/" # Copia el contenido de app-deploy (dist/, prisma/, package.json, etc.)
          target: "/srv/my-app-backend/release-${{ github.run_id }}"
          strip_components: 1 # Remueve el directorio 'app-deploy' del path en el servidor, copiando su contenido directamente.

      - name: Execute deployment commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e # Salir inmediatamente si un comando falla

            NEW_RELEASE_DIR="/srv/my-app-backend/release-${{ github.run_id }}"
            APP_DIR_CURRENT="/srv/my-app-backend/current" # Symlink a la release actual
            PM2_APP_NAME="${{ secrets.PM2_BACKEND_APP_NAME }}"

            echo "Installing production dependencies in $NEW_RELEASE_DIR..."
            cd $NEW_RELEASE_DIR
            # El contenido del artefacto (dist, prisma, package.json) está ahora en $NEW_RELEASE_DIR
            npm install --production

            echo "Running Prisma migrations..."
            # DATABASE_URL debe estar disponible como variable de entorno en la instancia EC2,
            # o configurada en el ecosystem file de PM2, o en el .env del directorio de la app.
            # Asegúrate de que $NEW_RELEASE_DIR/.env exista si es necesario, o que PM2 lo gestione.
            npx prisma migrate deploy

            echo "Updating symlink for current release to $NEW_RELEASE_DIR..."
            sudo ln -sfn $NEW_RELEASE_DIR $APP_DIR_CURRENT

            echo "Restarting application with PM2 ($PM2_APP_NAME)..."
            # Asegúrate que PM2 está configurado para usar $APP_DIR_CURRENT/dist/index.js
            # o un ecosystem.config.js dentro de $APP_DIR_CURRENT (que apuntaría a $NEW_RELEASE_DIR via symlink)
            # Por ejemplo, si PM2 fue iniciado con `pm2 start $APP_DIR_CURRENT/dist/index.js --name $PM2_APP_NAME`
            # Un simple reload debería funcionar:
            pm2 reload $PM2_APP_NAME || pm2 start $APP_DIR_CURRENT/dist/index.js --name $PM2_APP_NAME --cwd $APP_DIR_CURRENT

            echo "Deployment to EC2 complete. Current release pointing to: $NEW_RELEASE_DIR"

            # Opcional: Limpieza de releases antiguas (ej. mantener las últimas 5)
            echo "Cleaning up old releases..."
            cd /srv/my-app-backend && ls -dt release-* | tail -n +6 | xargs sudo rm -rf
            echo "Cleanup complete."